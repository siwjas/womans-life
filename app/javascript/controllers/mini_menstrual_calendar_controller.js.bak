import { Controller } from "@hotwired/stimulus"
import { Calendar } from '@fullcalendar/core'
import dayGridPlugin from '@fullcalendar/daygrid'
import ptBrLocale from '@fullcalendar/core/locales/pt-br'

export default class extends Controller {
  static values = {
    lastPeriod: String,
    nextPeriod: String,
    fertilityStart: String,
    fertilityEnd: String,
    ovulationDate: String,
    cycleLength: Number,
    cardType: String
  }

  static targets = ["calendar"]

  connect() {
    console.log("Mini calendar controller connected")
    this.initializeCalendar()
  }

  initializeCalendar() {
    // Encontrar o elemento do calendário dentro deste controlador
    const calendarEl = this.element.querySelector('div[id^="mini-calendar-"]')
    
    if (!calendarEl) {
      console.error('Elemento do mini-calendário não encontrado')
      return
    }
    
    console.log("Inicializando calendário em:", calendarEl.id)
    
    // Preparar eventos para o calendário
    const events = this.prepareEvents()
    
    // Determinar a data inicial com base no tipo de card
    let initialDate
    if (this.cardTypeValue === 'period') {
      initialDate = this.nextPeriodValue
    } else if (this.cardTypeValue === 'fertility') {
      initialDate = this.fertilityStartValue
    }
    
    // Inicializar o calendário
    const calendar = new Calendar(calendarEl, {
      plugins: [dayGridPlugin],
      initialView: 'dayGridMonth',
      initialDate: initialDate,
      locale: ptBrLocale,
      height: 'auto',
      headerToolbar: {
        left: '',
        center: 'title',
        right: ''
      },
      events: events,
      dayMaxEvents: 1,
      displayEventTime: false,
      eventDisplay: 'block',
      showNonCurrentDates: false,
      fixedWeekCount: false
    })
    
    try {
      calendar.render()
      console.log("Calendário renderizado com sucesso")
    } catch (error) {
      console.error("Erro ao renderizar calendário:", error)
    }
  }
  
  prepareEvents() {
    const events = []
    
    // Filtrar eventos com base no tipo de card
    if (this.cardTypeValue === 'period') {
      // Próximo período
      if (this.nextPeriodValue) {
        const nextPeriodDate = new Date(this.nextPeriodValue)
        const endDate = new Date(nextPeriodDate)
        endDate.setDate(endDate.getDate() + 5) // Assumindo 5 dias de duração
        
        events.push({
          title: 'Próximo Ciclo',
          start: this.nextPeriodValue,
          end: endDate.toISOString().split('T')[0],
          color: '#f687b3', // Rosa médio
          textColor: 'white'
        })
      }
    } else if (this.cardTypeValue === 'fertility') {
      // Período fértil
      if (this.fertilityStartValue && this.fertilityEndValue) {
        events.push({
          title: 'Período Fértil',
          start: this.fertilityStartValue,
          end: this.fertilityEndValue,
          color: '#9ae6b4', // Verde claro
          textColor: 'black'
        })
      }
      
      // Ovulação
      if (this.ovulationDateValue) {
        events.push({
          title: 'Ovulação',
          start: this.ovulationDateValue,
          allDay: true,
          color: '#38a169', // Verde escuro
          textColor: 'white'
        })
      }
    }
    
    return events
  }
} 